"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatesharkgame"]("main",{

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function() {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar solve = function (cavity, remaining) {\n    // Divide the target number minus 1 by 4 and take the remainder\n    // (or modulus, for the math nerds), as well as keeping the quotient handy.\n    // (18-1)/4 is 4 with a remainder of 1. This remainder is important,\n    // but so is the quotient, so keep 1 and 4 in mind.\n    var target = remaining - cavity - 1;\n    var rem = target % 4;\n    var quot = Math.floor((target - 1) / 4);\n    return { rem: rem, quot: quot };\n};\nvar sleep = function (ms) { return new Promise(function (res) { return setTimeout(res, ms); }); };\nvar main = function () { return __awaiter(void 0, void 0, void 0, function () {\n    var scale, canvasContainer, hitboxes, maxWidth, maxHeight, actualWidth, actualHeight, images, scaledImages, makeImg, scaledImagesWithImages, makeCanvas, scaledImagesWithImagesWithCanvases, drawImg, state, clickLock, setInstructions, resetButton, _drawHitboxen;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                scale = 1.5;\n                canvasContainer = document.getElementById(\"shark-game\");\n                if (!canvasContainer) {\n                    throw new Error(\"Container not found\");\n                }\n                hitboxes = {\n                    ids: {},\n                    hitboxes: {},\n                };\n                maxWidth = 390;\n                maxHeight = 404;\n                actualWidth = 0;\n                actualHeight = 0;\n                images = __spreadArray([\n                    {\n                        id: \"background\",\n                        src: \"background.png\",\n                        width: 394,\n                        left: 29,\n                        top: 29,\n                    },\n                    {\n                        id: \"frame\",\n                        src: \"frame.png\",\n                        width: 448,\n                        left: 0,\n                        top: 0,\n                    },\n                    { id: \"shark\", src: \"shark.png\", width: 396, left: 30, top: 28 }\n                ], __spreadArray([], Array(20), true).map(function (_, index) {\n                    var i = index + 1;\n                    return {\n                        id: \"tooth-\".concat(i),\n                        src: i < 10 ? \"tooth_0\".concat(i, \".png\") : \"tooth_\".concat(i, \".png\"),\n                        width: 392,\n                        left: 30,\n                        top: 30,\n                    };\n                }), true);\n                scaledImages = images.map(function (_a) {\n                    var width = _a.width, left = _a.left, top = _a.top, rest = __rest(_a, [\"width\", \"left\", \"top\"]);\n                    return (__assign({ width: Math.floor(width * scale), height: Math.floor((maxHeight / maxWidth) * width * scale), left: Math.floor(left * scale), top: Math.floor(top * scale) }, rest));\n                });\n                // find the largest dimesntions and set the canvas width/height to that\n                scaledImages.forEach(function (_a) {\n                    var width = _a.width, height = _a.height;\n                    if (actualWidth < width) {\n                        actualWidth = width;\n                    }\n                    if (actualHeight < height) {\n                        actualHeight = height;\n                    }\n                });\n                canvasContainer.style.position = \"relative\";\n                canvasContainer.style.width = \"\".concat(actualWidth, \"px\");\n                canvasContainer.style.height = \"\".concat(actualHeight, \"px\");\n                makeImg = function (image) { return __awaiter(void 0, void 0, void 0, function () {\n                    var id, src, width, height, left, top, container, img;\n                    return __generator(this, function (_a) {\n                        id = image.id, src = image.src, width = image.width, height = image.height, left = image.left, top = image.top;\n                        container = document.createElement(\"div\");\n                        img = document.createElement(\"img\");\n                        img.src = \"images/\".concat(src);\n                        container.appendChild(img);\n                        return [2 /*return*/, new Promise(function (resolve) {\n                                var onLoad = function (e) {\n                                    if (id.startsWith(\"tooth\") && !hitboxes.ids[id]) {\n                                        hitboxes.ids[id] = true;\n                                        var pixelFinder = document.createElement(\"canvas\");\n                                        pixelFinder.width = actualWidth;\n                                        pixelFinder.height = actualHeight;\n                                        var pxlCtx = pixelFinder.getContext(\"2d\");\n                                        if (!pxlCtx) {\n                                            throw new Error(\"Something wonky with this context yo\");\n                                        }\n                                        pxlCtx.drawImage(img, left, top, width, height);\n                                        var imgd = pxlCtx.getImageData(0, 0, actualWidth, actualHeight);\n                                        var pix = imgd.data;\n                                        for (var x = 0; x < actualWidth; x++) {\n                                            for (var y = 0; y < actualHeight; y++) {\n                                                var index = (y * actualWidth + x) * 4;\n                                                var alpha = pix[index + 3];\n                                                if (alpha > 1) {\n                                                    hitboxes.hitboxes[\"\".concat(x, \"-\").concat(y)] = id;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    resolve(__assign(__assign({}, image), { image: img }));\n                                    img.removeEventListener(\"load\", onLoad);\n                                };\n                                img.addEventListener(\"load\", onLoad);\n                            })];\n                    });\n                }); };\n                return [4 /*yield*/, Promise.all(scaledImages.map(makeImg))];\n            case 1:\n                scaledImagesWithImages = _a.sent();\n                makeCanvas = function (image) {\n                    var canvas = document.createElement(\"canvas\");\n                    canvas.style.position = \"absolute\";\n                    canvas.style.top = \"0\";\n                    canvas.style.left = \"0\";\n                    canvas.style.background = \"transparent\";\n                    canvas.width = actualWidth;\n                    canvas.height = actualHeight;\n                    var ctx = canvas.getContext(\"2d\");\n                    if (!ctx) {\n                        throw new Error(\"Something wonky with this context yo\");\n                    }\n                    ctx.imageSmoothingEnabled = false;\n                    canvasContainer.appendChild(canvas);\n                    return __assign(__assign({}, image), { canvas: canvas, ctx: ctx });\n                };\n                scaledImagesWithImagesWithCanvases = scaledImagesWithImages.map(makeCanvas);\n                drawImg = function (img) {\n                    var ctx = img.ctx, image = img.image, left = img.left, top = img.top, width = img.width, height = img.height, _a = img.tint, tint = _a === void 0 ? null : _a, clear = img.clear;\n                    if (clear) {\n                        ctx.clearRect(0, 0, actualWidth, actualHeight);\n                    }\n                    else if (tint) {\n                        var color = tint.color, _b = tint.alpha, alpha = _b === void 0 ? 0.5 : _b;\n                        var backBuffer = document.createElement(\"canvas\");\n                        backBuffer.width = actualWidth;\n                        backBuffer.height = actualHeight;\n                        var btx = backBuffer.getContext(\"2d\");\n                        if (!btx) {\n                            throw new Error(\"Something wonky with this context yo\");\n                        }\n                        btx.clearRect(0, 0, actualWidth, actualHeight);\n                        btx.drawImage(image, left, top, width, height);\n                        // Now we'll multiply a rectangle of your chosen color\n                        btx.fillStyle = color;\n                        btx.globalCompositeOperation = \"multiply\";\n                        btx.fillRect(0, 0, actualWidth, actualHeight);\n                        btx.globalAlpha = alpha;\n                        btx.globalCompositeOperation = \"destination-in\";\n                        btx.drawImage(image, left, top, width, height);\n                        ctx.drawImage(backBuffer, 0, 0, actualWidth, actualHeight);\n                    }\n                    else {\n                        ctx.drawImage(image, left, top, width, height);\n                    }\n                };\n                scaledImagesWithImagesWithCanvases.forEach(function (img) { return drawImg(img); });\n                state = { state: \"select-cavity\" };\n                clickLock = { lock: null };\n                setInstructions = function () {\n                    var instructionsContent = document.getElementById(\"instructions-content\");\n                    if (!instructionsContent) {\n                        throw new Error(\"Instructions content area not found\");\n                    }\n                    switch (state.state) {\n                        case \"select-cavity\": {\n                            instructionsContent.textContent = \"Select the tooth with the cavity!\";\n                            break;\n                        }\n                        case \"select-tooth\": {\n                            // TODO: Try to always count from the same side.\n                            var rem = solve(21 - state.cavity, 21 - (state.selected || 0)).rem;\n                            instructionsContent.textContent = \"Select the currently played tooth!\\nIf it's your turn, then play \".concat(rem || 1, \"!\");\n                            break;\n                        }\n                        case \"win\": {\n                            instructionsContent.textContent = \"If it's your turn, then you've won!\";\n                            break;\n                        }\n                    }\n                };\n                resetButton = document.getElementById(\"reset\");\n                if (!resetButton) {\n                    throw new Error(\"Reset button not found\");\n                }\n                resetButton.addEventListener(\"click\", function () { return __awaiter(void 0, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                if (!clickLock.lock) return [3 /*break*/, 2];\n                                return [4 /*yield*/, clickLock.lock];\n                            case 1:\n                                _a.sent();\n                                _a.label = 2;\n                            case 2:\n                                state = { state: \"select-cavity\" };\n                                scaledImagesWithImagesWithCanvases\n                                    .filter(function (i) { return i.id.startsWith(\"tooth\"); })\n                                    .map(drawImg);\n                                setInstructions();\n                                return [2 /*return*/];\n                        }\n                    });\n                }); });\n                canvasContainer.addEventListener(\"click\", function (e) { return __awaiter(void 0, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                if (clickLock.lock !== null) {\n                                    return [2 /*return*/];\n                                }\n                                clickLock.lock = new Promise(function (res) { return __awaiter(void 0, void 0, void 0, function () {\n                                    var canvasRect, x, y, hitboxId, image, target, _loop_1, i;\n                                    var _a;\n                                    return __generator(this, function (_b) {\n                                        switch (_b.label) {\n                                            case 0:\n                                                canvasRect = canvasContainer.getBoundingClientRect();\n                                                x = Math.floor(e.offsetX);\n                                                y = Math.floor(e.offsetY);\n                                                hitboxId = hitboxes.hitboxes[\"\".concat(x, \"-\").concat(y)];\n                                                if (!hitboxId) return [3 /*break*/, 7];\n                                                image = scaledImagesWithImagesWithCanvases.find(function (_a) {\n                                                    var id = _a.id;\n                                                    return id === hitboxId;\n                                                });\n                                                if (!image) return [3 /*break*/, 6];\n                                                target = parseInt(hitboxId.split(\"-\")[1], 10);\n                                                if (!(state.state === \"select-cavity\")) return [3 /*break*/, 1];\n                                                drawImg(__assign(__assign({}, image), { tint: { color: \"#F00000\", alpha: 0.3 } }));\n                                                state = { state: \"select-tooth\", cavity: target, selected: null };\n                                                return [3 /*break*/, 6];\n                                            case 1:\n                                                if (!(target < state.cavity &&\n                                                    (state.selected == null || state.selected < target))) return [3 /*break*/, 6];\n                                                _loop_1 = function (i) {\n                                                    var image_1;\n                                                    return __generator(this, function (_c) {\n                                                        switch (_c.label) {\n                                                            case 0:\n                                                                image_1 = scaledImagesWithImagesWithCanvases.find(function (_a) {\n                                                                    var id = _a.id;\n                                                                    return id === \"tooth-\".concat(i);\n                                                                });\n                                                                if (!image_1) return [3 /*break*/, 2];\n                                                                drawImg(__assign(__assign({}, image_1), { clear: true }));\n                                                                return [4 /*yield*/, sleep(150)];\n                                                            case 1:\n                                                                _c.sent();\n                                                                _c.label = 2;\n                                                            case 2: return [2 /*return*/];\n                                                        }\n                                                    });\n                                                };\n                                                i = (_a = state.selected) !== null && _a !== void 0 ? _a : 1;\n                                                _b.label = 2;\n                                            case 2:\n                                                if (!(i <= target)) return [3 /*break*/, 5];\n                                                return [5 /*yield**/, _loop_1(i)];\n                                            case 3:\n                                                _b.sent();\n                                                _b.label = 4;\n                                            case 4:\n                                                i++;\n                                                return [3 /*break*/, 2];\n                                            case 5:\n                                                if (target + 1 === state.cavity) {\n                                                    state = {\n                                                        state: \"win\",\n                                                        cavity: state.cavity,\n                                                        selected: target,\n                                                    };\n                                                }\n                                                else {\n                                                    state = {\n                                                        state: \"select-tooth\",\n                                                        cavity: state.cavity,\n                                                        selected: target,\n                                                    };\n                                                }\n                                                _b.label = 6;\n                                            case 6:\n                                                setInstructions();\n                                                _b.label = 7;\n                                            case 7:\n                                                res();\n                                                return [2 /*return*/];\n                                        }\n                                    });\n                                }); });\n                                return [4 /*yield*/, clickLock.lock];\n                            case 1:\n                                _a.sent();\n                                clickLock.lock = null;\n                                return [2 /*return*/];\n                        }\n                    });\n                }); });\n                _drawHitboxen = function () {\n                    var canvas = document.createElement(\"canvas\");\n                    canvas.style.position = \"absolute\";\n                    canvas.style.top = \"0\";\n                    canvas.style.left = \"0\";\n                    canvas.style.background = \"transparent\";\n                    canvas.width = actualWidth;\n                    canvas.height = actualHeight;\n                    var ctx = canvas.getContext(\"2d\");\n                    if (!ctx) {\n                        throw new Error(\"Something wonky with this context yo\");\n                    }\n                    ctx.imageSmoothingEnabled = false;\n                    var img = ctx.getImageData(0, 0, actualWidth, actualHeight);\n                    var data = img.data;\n                    for (var hitboxId in hitboxes.hitboxes) {\n                        var _a = hitboxId.split(\"-\"), x = _a[0], y = _a[1];\n                        var index = parseInt(y, 10) * actualWidth + parseInt(x, 10);\n                        data[index * 4] = 255;\n                        data[index * 4 + 3] = 255;\n                    }\n                    ctx.putImageData(img, 0, 0);\n                    canvasContainer.appendChild(canvas);\n                };\n                return [2 /*return*/];\n        }\n    });\n}); };\nmain();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("774976e663206182c2e4")
/******/ })();
/******/ 
/******/ }
);